考试目标：
	051.10.1  分类主要的数据库对象
	051.10.2  回顾表结构
	051.10.3  列举列可用的数据类型
	051.10.4  创建简单的表
	051.10.5  讨论在创建表时如何创建约束
	051.10.6  描述模式对象的工作方式
	052.8.1     创建和修改表
	052.8.2     管理约束
	052.8.3     创建所索引
	052.8.4     创建和使用临时表
	052.11.1  创建简单视图和复杂
	052.11.2  从视图中检索数据
	052.11.3  创建，维护和使用序列
	052.11.4  创建和维护索引
	052.11.5  创建私有同义词和公有同义词
	

	
7.1 分类主要的数据库对象
	查询数据库中存在的对象类型：
		select object_type,count(object_type) from dba_objects group by object_type order by object_type;



7.2 可用数据类型
	------字母数字类型-------
	varchar2:可变长度字符数据，从1B到4KB，数据保存在数据库字符集中。
	nvarchar2:和varchar2一样，数据保存在国家语言字符集。
	char:固定长度字符数据。从1B到2KB,数据保存在数据库字符集中。
	varchar:这种类型会自动转换为varchar2。
	
	------数字类型-------
	number:数字数据，可以指定精度和小数位数。精度范围：1-38，小数位数范围：-84~127。
	float:精度为126位二进制，38位十进制的浮点数。
	integer:相当于number，小数位为零。
	
	------日期和时间类型-------
	date:长度为零（列为空）或者7个字节。包含世纪，年，月，日，时，分，秒。范围:公元前4712年1月1日 - 公元9999年12月31日。
	timestamp:长度为零（列为空）或者11个字节。与date类似，秒的精度最多为9位，默认为6位。
	timestamp with timezone：和timestamp一样，但保存数据时可以指定时区。长度最多达到13个字节。
	timestamp with local timezone:和timestamp一样，但保存数据时被规范化为数据库时区。
	interval year to month:用于记录两个date或者timestamp之间以年和月为单位的时间间隔。
	interval day to second:用于记录两个date或者timestamp之间以天和秒为单位的时间间隔。

	------大对象数据类型-------
	clob:保存在数据库字符集中的字符数据，大小没有限制：4GB*数据库块的大小。
	nclob:和clob一样，数据保存在国家语言字符集。
	blob:和clob一样，但二进制数据不会被oracle net执行字符集转换。
	bfile:定位器，指向保存在数据库服务器的操作系统上的文件。文件大小限制为4GB。
	long:数据库字符集中的字符数据，大小可达2GB。不适用，推荐clob。
	long raw:和long一样，oracle net不会转换二进制数据。不适用，推荐blob。
	
	------raw,rowid数据类型-------
	raw:可变长度的二进制数据，从1B到4KB。oracle net不会将raw数据从数据库的字符集转换为用户进程的字符集。
	rowid：以64为基数编码的值，指向表中行的位置的指针。它里面是物理地址。
	
	
	USER_TAB_COLUMNS：将显示当且用户模式中每个表的每一列的详细情况。
	select column_name,data_type,nullable,data_length,data_precision,data_scale from user_tab_columns where table_name='';


7.3 创建简单的表
	7.3.1 使用列规范创建表
	CREATE TABLE [schema.]table [ORGANIZATION HEAP]
	(column datatype [DEFAULT expression]
	 [,column datatype [DEFAULT expression]]
	);
	
	create table emp(
	empno number(4),
	ename varchar2(10),
	hiredate date default trunc(sysdate),
	sal number(7,2),
	comm number(7,2) default 0.03);
	
	insert into emp(empno,ename,sal) values(1000,'John',1000.789);
	
	select * from emp;
	 EMPNO ENAME      HIREDATE        SAL       COMM
	------ ---------- -------- ---------- ----------
      1000 John       15-10-08    1000.79        .03
	
	
	7.3.2 使用子查询创建表
	CREATE TABLE [schema].table AS subquery;
	
	创建emp的副本，并将所有数据也同时插入新表。并且会复制检查约束和非空约束，其他约束除外。
	create table emp_copy as select * from emp;
	如果只想要创建表，不需要数据则可以在后面加 where 1=2;
	
	7.3.3 创建之后更改表定义
		添加列：	alter table emp add (job_id number);
		修改列：	alter table emp modify (sal number(8,2) default 0.05);
		删除列：	alter table emp drop column job_id;
		标记为未使用：	alter table emp set unused column job_id;
		重命名：			alter table emp rename column hiredate to recruited;
		标记为只读：		alter table emp read only;
		删除未使用列：	alter table emp drop unused columns;
	
	
	7.3.4 删除和截断表
		DROP TABLE [schema.]table；
	
	
7.4	创建和使用临时表
	CREATE GLOBAL TEMPORARY TABLE temp_tab_name
	(column datatyep [,column datatype])
	[ON COMMIT {DELETE | PRESERVE} ROWS];	
	

	create global temporary table tmp_emps on commit preserve rows as select * from emp where 1=2;
	
	insert into tmp_emps select * from emp where sal=1000;

	
	
7.5 索引
	功能：一是强制实施主键约束，二是提高性能。
	
	类型：
	1，B*树索引（默认索引类型）：B代表平衡（balanced）是一个树结构。
		一般而言，如果遇到以下情况，应该使用B*树索引：列的基数（不同值的个数）很大，表的行数多，列用在WHERE子句或JOIN条件中。
		注:如果WHERE子句中指定的值是NULL，NULL不会参与到B*树索引中，将始终导致全表扫描。
		        一般认为，如果查询要检索超过2%-4%的行，则全表扫描速度更快
		        
	2，位图索引：将与每个键值关联的rowid存储为位图。
		一般而言，如果遇到以下情况，应该使用B*树索引：列的基数（不同值的个数）小，表的行数多，列用在布尔代数运算。
		
	3，索引类型选项：
		唯一或非唯一，反向键，压缩，复合，基于函数，升序或降序
		所有6个选项都可应用于B*树索引，后3个可用于位图索引。

	4，创建和使用索引
		在定义主键约束和唯一约束时，如果相关列上的索引并不存在，则将隐式创建索引。
		显示创建语法：
			CREATE [UNIQUE | BITMAP] INDEX [schema].indexname
			ON [schema].tablename(column, [,column...]);
			
		索引的默认类型是非唯一，非压缩，非反向键B*树索引，无法创建唯一的位图索引。

		create table dept(deptno number, dname varchar2(10));
		create table emp(empno number, surname varchar2(10)， forename varchar2(10), dob date, deptno number);
		
		create unique index dept_i1 on dept(deptno);
		create unique index emp_i1  on emp(empno);
		create index emp_i2 on emp(surname,forename);
		create bitmap index emp_i3 on emp(deptno);
		
		alter table dept add constraint dept_pk primary key (deptno);
		alter table emp add constraint emp_pk primary key (empno);
		alter table emp add constraint emp_fk foreign key (deptno) references dept(deptno);


	5,修改和删除索引
		ALTER INDEX不能更改上述索引的任何特性，通常用于调整索引的物理属性。
		只能先删除索引，再重新创建。
		
		drop index emp_i2;
		create index emp_i2 on emp(surname,forename,dob);


7.6 约束
	7.6.1  约束类型：UNIQUE,NOT NULL,PRIMARY　KEY,FOREIGN KEY,CHECK
		1,UNIQUE:对于列或者列组合，表中每行的值必须不同。特例是，可以包含任意数量的NULL值。
				UNIQUE约束通过索引来实施。在定义UNIQUE约束时，Oracle将查看键列上的索引，如果不存在，就创建一个。
		2,NOT NULL:强制在列中输入值，针对每个列进行定义。
		3,PRIMARY　KEY:是UNIQUE和NOT NULL的组合。
		4,FOREIGN KEY:使子表中的列对应父表的主键列。外键约束在子表定义，父表上必须存在UNIQUE或PRIMARY KEY约束。
		5,CHECK:实施简单的规则，规则必须是一个结果为TRUE或FALSE的表达式。

	7.6.2 定义约束
		可以在创建表时定义约束，也可在后期将约束添加到表中。

		方式一：与列一起定义
		create table dept(
		deptno number(2,0) constraint dept_deptno_pk primary key constraint dept_deptno_ck check(deptno between 10 and 90),
		dname varchar2(20) constraint dept_dname_nn not null
		);

		方式二：在表定义结束前统一定义
		create table emp(
		empno number(4,0) constraint emp_empno_pk primary key,
		ename varchar2(20) constraint emp_ename_nn not null,
		mgr number(4,0) constraint emp_mgr_fk references emp(empno),
		dob date,
		hiredate date,
		deptno number(2,0) constraint emp_dept_fk references dept(deptno) on delete set null,
		email varchar2(30) constraint emp_email_uk unique,
		constraint emp_hiredate_ck check(hiredate >= dob + 365*16),
		constraint emp_email_ck check( (instr(email,'@') > 0) and (instr(email,'.') > 0 ) )
		);
		
		方式三：修改表定义
		alter table emp add constraint ename_uk unique(ename);
		
	7.6.3 约束状态
		启用，禁止，验证，非验证。
		组合：
			ENABLE VALIDATE:无法输入违反约束的行，表中所有行都符合约束。(定义约束时的默认设置)
			DISABLE NOVALIDATE:可以输入任何数据，表中可能存在不合乎要求的数据。
			ENABLE NOVALIDATE:表中可能存在不合乎要求的数据，但现在输入的所有数据必须符合要求。
			DISABLE VALIDATE:不可能的状态。

		语法：alter table tablename modify constraint con_name [disable novalidate | ...];


	7.6.4 检查约束
		默认方式下，将启用和验证约束，而且约束不可延迟。

		将约束延迟：set constraint c_name deferred;（提交事务时检查）
		将约束立即：set constraint c_name immediate;(执行语句时检查)
		
		要使约束成为延迟约束，必须使用适当的方法予以创建：
		alter table tablename add constraint c_name check(column in not null) deferrable initially immediate;
		


7.7 视图
	使用视图的原因：安全性，简化用户SQL语句，防止错误，提高性能，是数据易于理解。
	
	CREATE [OR REPLACE] [FORCE | NOFORCE(默认)] VIEW
	[schema.]viewname [(alias [,alias]...]
	AS subquery
	[WITH CHECK　OPTION [CONSTRAINT constraintname]]
	[WITH READ ONLY [CONSTRAINT constraintname]];

	不能通过修改表列的方式调整视图的列。必须先删除再重建。
	DROP VIEW [schema.]viewname;
	
	

7.8 同义词
	创建：CREATE [PUBLIC] SYNONYM synonym FOR object;
	删除：DROP [PUBLIC] SYNONYM synonym;
	编译：ALTER SYNONYM sysnonym COMPILE;
	
	create synonym emp for hr.employees@prod;

7.9 序列
	生成唯一整数值的结构。

	CREATE SEQUENCE [schema.]sequencename
	[INCREMENT BY number]
	[START WITH number]
	[MAXVALUE number | NOMAXVALUE]
	[MINVALUE number | NOMINVALUE]
	[CYCLE | NOCYCLE]
	[CACHE number | NOCACHE]
	[ORDER | NOORDER];

	create sequence seq;


	使用序列：sequencename.NEXTVAL,sequencename.CURRVAL
	
	修改序列：
	ALTER　SEQUENCE [schema.]sequencename
	[INCREMENT BY number]
	[MAXVALUE number | NOMAXVALUE]
	[MINVALUE number | NOMINVALUE]
	[CYCLE | NOCYCLE]
	[CACHE number | NOCACHE]
	[ORDER | NOORDER];
	
	
	
	
	

作成日：2015/10/8